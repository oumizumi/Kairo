"""
Django settings for kairo project.

Generated by 'django-admin startproject' using Django 4.2.
For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# --- Helper Functions for Environment Variables ---
def get_env_var_as_boolean(name, default='False'):
    return os.environ.get(name, default).lower() in ('true', '1', 't')

def get_env_var_as_list(name, default='', separator=','):
    var = os.environ.get(name, default)
    return [item.strip() for item in var.split(separator) if item.strip()]

def get_env_var_as_int(name, default='0'):
    try:
        return int(os.environ.get(name, default))
    except ValueError:
        return int(default)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Ensure DJANGO_SECRET_KEY is set in the production environment.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-fallback-key-for-development-replace-this-in-prod')

# SECURITY WARNING: don't run with debug turned on in production!
# DJANGO_DEBUG should be 'False' in production.
DEBUG = get_env_var_as_boolean('DJANGO_DEBUG', 'True')


# ALLOWED_HOSTS
# DJANGO_ALLOWED_HOSTS should be a comma-separated string of allowed hostnames/IPs.
# e.g., "yourdomain.com,www.yourdomain.com"
# Default is restrictive; override in production.
ALLOWED_HOSTS_DEFAULT = ['localhost', '127.0.0.1'] if DEBUG else []
ALLOWED_HOSTS = get_env_var_as_list('DJANGO_ALLOWED_HOSTS', default=','.join(ALLOWED_HOSTS_DEFAULT))
if not ALLOWED_HOSTS and not DEBUG:
    print("WARNING: DJANGO_ALLOWED_HOSTS is not set and DEBUG is False. This will likely cause issues.")


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles', # Django's staticfiles app
    'whitenoise.runserver_nostatic', # For serving static files with runserver during development if DEBUG=True
    'rest_framework', # Django REST framework
    'rest_framework_simplejwt', # JWT authentication
    'api', # The kairo api app
    'corsheaders', # For CORS
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Whitenoise (after SecurityMiddleware, before most others)
    'corsheaders.middleware.CorsMiddleware', # CORS Middleware (high up, before CommonMiddleware)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'kairo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'kairo.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
import dj_database_url

# Default to SQLite for development
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Use DATABASE_URL if provided (for production)
if 'DATABASE_URL' in os.environ:
    try:
        parsed_db = dj_database_url.parse(os.environ['DATABASE_URL'])
        DATABASES['default'] = parsed_db
        DATABASES['default']['CONN_MAX_AGE'] = 0  # Disable connection pooling to avoid stale connections
        
        # Add connection retry settings for Railway with better timeouts
        if 'OPTIONS' not in DATABASES['default']:
            DATABASES['default']['OPTIONS'] = {}
        
        DATABASES['default']['OPTIONS'].update({
            'connect_timeout': 60,  # Increased timeout
            'sslmode': 'require',
            'application_name': 'kairo_django',
            'keepalives_idle': 600,
            'keepalives_interval': 30,
            'keepalives_count': 3,
        })
        
        # Add connection retry at Django level
        DATABASES['default']['CONN_HEALTH_CHECKS'] = True
        
        print(f"Configured PostgreSQL database: {parsed_db['NAME']}")
        
    except Exception as e:
        print(f"Warning: Could not parse DATABASE_URL: {e}")
        print("Falling back to SQLite database")
        # Keep the default SQLite configuration


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I1N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
# STATIC_ROOT is the directory where Django will collect all static files.
# Required for 'collectstatic' and serving static files in production.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Whitenoise configuration for serving static files efficiently in production.
# Using CompressedManifestStaticFilesStorage for gzipping and versioning.
# Ensure 'whitenoise.middleware.WhiteNoiseMiddleware' is in MIDDLEWARE.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


"""
--- CORS Configuration ---
Honor DJANGO_CORS_ALLOWED_ORIGINS. Default to localhost in dev. In prod, keep list
empty unless provided or one of the known Vercel domains. When a non-empty list is
configured, force CORS_ALLOW_ALL_ORIGINS to False so the list applies.
"""
CORS_ALLOWED_ORIGINS = get_env_var_as_list('DJANGO_CORS_ALLOWED_ORIGINS')
CORS_ALLOW_ALL_ORIGINS = get_env_var_as_boolean('DJANGO_CORS_ALLOW_ALL_ORIGINS', 'True')

if DEBUG:
    if not CORS_ALLOWED_ORIGINS:
        CORS_ALLOWED_ORIGINS = ['http://localhost:3000']
else:
    if not CORS_ALLOWED_ORIGINS:
        CORS_ALLOWED_ORIGINS = []
        production_origins = [
            'https://kairo-public.vercel.app',
            'https://kairo-public-git-master-oumers-projects.vercel.app',
            'https://kairo-public-ousmane74s-projects.vercel.app',
            'https://kairo.vercel.app',
            'https://kairo-frontend.vercel.app',
            'https://kairo-public-git-master-oumer-projects.vercel.app',
            'https://kairo-public-git-main-oumer-projects.vercel.app',
            'https://kairo-gilt.vercel.app',
            'https://kairo-git-main-oumizumis-projects.vercel.app'
        ]
        for origin in production_origins:
            if origin not in CORS_ALLOWED_ORIGINS:
                CORS_ALLOWED_ORIGINS.append(origin)

extra_origin = os.environ.get('NEXT_PUBLIC_SITE_URL') or os.environ.get('FRONTEND_ORIGIN')
if extra_origin and extra_origin not in CORS_ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS.append(extra_origin)

if CORS_ALLOWED_ORIGINS:
    CORS_ALLOW_ALL_ORIGINS = False

CORS_ALLOW_CREDENTIALS = get_env_var_as_boolean('DJANGO_CORS_ALLOW_CREDENTIALS', 'True') # Common for token auth

# Configure CORS methods and headers explicitly
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


# --- Security Headers ---
# These settings enhance the security of your Django application.
# They should be True in production if your site is served over HTTPS.

# SECURE_SSL_REDIRECT: Redirects all HTTP requests to HTTPS.
# Requires your proxy to correctly set X-Forwarded-Proto: https
SECURE_SSL_REDIRECT = get_env_var_as_boolean('DJANGO_SECURE_SSL_REDIRECT', 'False' if DEBUG else 'True')

# SECURE_HSTS_SECONDS: HTTP Strict Transport Security. Tells browsers to only use HTTPS.
# Start with a small value (e.g., 3600) and increase once confirmed working.
# Default to 0 if DEBUG is True, otherwise a common production value.
SECURE_HSTS_SECONDS_DEFAULT = '0' if DEBUG else '31536000' # 1 year
SECURE_HSTS_SECONDS = get_env_var_as_int('DJANGO_SECURE_HSTS_SECONDS', SECURE_HSTS_SECONDS_DEFAULT)

SECURE_HSTS_INCLUDE_SUBDOMAINS = get_env_var_as_boolean('DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS', 'False' if DEBUG else 'True')
SECURE_HSTS_PRELOAD = get_env_var_as_boolean('DJANGO_SECURE_HSTS_PRELOAD', 'False' if DEBUG else 'True')

# SECURE_CONTENT_TYPE_NOSNIFF: Prevents browsers from MIME-sniffing a response away from the declared content-type.
SECURE_CONTENT_TYPE_NOSNIFF = get_env_var_as_boolean('DJANGO_SECURE_CONTENT_TYPE_NOSNIFF', 'True')

# SESSION_COOKIE_SECURE: Ensures session cookies are only sent over HTTPS.
SESSION_COOKIE_SECURE = get_env_var_as_boolean('DJANGO_SESSION_COOKIE_SECURE', 'False' if DEBUG else 'True')

# CSRF_COOKIE_SECURE: Ensures CSRF cookies are only sent over HTTPS.
CSRF_COOKIE_SECURE = get_env_var_as_boolean('DJANGO_CSRF_COOKIE_SECURE', 'False' if DEBUG else 'True')

# X_FRAME_OPTIONS: Clickjacking protection.
# Default in recent Django is 'DENY'. Explicitly setting from env var.
X_FRAME_OPTIONS = os.environ.get('DJANGO_X_FRAME_OPTIONS', 'DENY')


# --- Logging Configuration (Example) ---
# Consider adding more robust logging for production.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'), # Default to INFO
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_LOG_LEVEL_DJANGO', 'INFO'),
            'propagate': False,
        },
    },
}

# Note: For actual email sending in production (e.g., password reset),
# you'll need to configure EMAIL_BACKEND, EMAIL_HOST, EMAIL_PORT, EMAIL_USE_TLS/SSL, etc.
# Example (using environment variables):
# EMAIL_BACKEND = os.environ.get('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
# EMAIL_HOST = os.environ.get('DJANGO_EMAIL_HOST')
# EMAIL_PORT = get_env_var_as_int('DJANGO_EMAIL_PORT', '587')
# EMAIL_USE_TLS = get_env_var_as_boolean('DJANGO_EMAIL_USE_TLS', 'True')
# EMAIL_HOST_USER = os.environ.get('DJANGO_EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_HOST_PASSWORD')
# DEFAULT_FROM_EMAIL = os.environ.get('DJANGO_DEFAULT_FROM_EMAIL', 'webmaster@localhost')
# SERVER_EMAIL = os.environ.get('DJANGO_SERVER_EMAIL', 'root@localhost') # For error emails to admins

# --- Email Configuration ---
# Email settings for contact form and other email functionality
EMAIL_BACKEND = os.environ.get('DJANGO_EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.environ.get('DJANGO_EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = get_env_var_as_int('DJANGO_EMAIL_PORT', '587')
EMAIL_USE_TLS = get_env_var_as_boolean('DJANGO_EMAIL_USE_TLS', 'True')
EMAIL_HOST_USER = os.environ.get('DJANGO_EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('DJANGO_EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DJANGO_DEFAULT_FROM_EMAIL', 'noreply@kairo.app')
CONTACT_EMAIL = os.environ.get('DJANGO_CONTACT_EMAIL', 'your-email@example.com')  # Your email to receive contact messages
SERVER_EMAIL = os.environ.get('DJANGO_SERVER_EMAIL', 'root@localhost')  # For error emails to admins

# Ensure the OPENAI_API_KEY is managed securely and not hardcoded.
# It's accessed via os.environ.get('OPENAI_API_KEY') in views.py.

# At the end of the file, you might want to add conditional local settings import for development
# if not os.environ.get('DJANGO_SETTINGS_MODULE'): # Or some other production indicator
#     try:
#         from .local_settings import *
#     except ImportError:
#         pass

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer', 'Token'),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# CORS settings - These are overridden by the environment variable configuration above
# The settings above in the CORS Configuration section take precedence

# OpenAI API Key - MUST be set in environment variables
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
if not OPENAI_API_KEY:
    print("WARNING: OPENAI_API_KEY environment variable is not set. AI features will not work.")
